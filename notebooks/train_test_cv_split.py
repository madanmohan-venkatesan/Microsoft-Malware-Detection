
import os
import numpy as np
import pandas as pd
from matplotlib import pyplot as plt
from sklearn.model_selection import train_test_split

def y_distribution(mode,y,path):
    '''
    Prints distrubtion of classes and gives the percentage of value from selected dataset.
    `````````````````````````````````````````````````````````````````````````````````````
    Args:
        mode: ['TRAIN','TEST','CV']
        y: class labels of the dateset
        path: path to save the output
    `````````````````````````````````````````````````````````````````````````````````````
    Returns: 
        None
    `````````````````````````````````````````````````````````````````````````````````````
    '''
    # ref: argsort https://docs.scipy.org/doc/numpy/reference/generated/numpy.argsort.html
    # -(train_class_distribution.values): the minus sign will give us in decreasing order
    
    class_distribution = y.value_counts().sort_values()

    plt.figure()
    my_colors = ['r', 'g', 'b', 'k', 'y', 'm', 'c']
    class_distribution.plot(kind='bar', color=my_colors)
    plt.xlabel('Class')
    plt.ylabel('Data points per Class')
    plt.title(f'Distribution of yi in {mode} data')
    plt.grid()
    plt.savefig(path)
    print("Image saved in {path}")

    sorted_yi = np.argsort(-class_distribution.values)
    for i in sorted_yi:
        print(f'Number of data points in class {i+1} : \
              {class_distribution.values[i]} ({np.round((class_distribution.values[i]/y.shape[0]*100), 3)} %)')
    print('-'*80)

def train_test_cv_split():
    '''
    ``````````````````````````````````````````````````````````````
    Returns train,test and CV split of dataset.
    ``````````````````````````````````````````````````````````````
    Args:
        None
    ```````````````````````````````````````````````````````````````
    Returns:
        Returns the split data in following order
        X_train,X_test,X_cv,y_train,y_test,y_cv
    ``````````````````````````````````````````````````````````````
    
    '''
    #Define paths
    NOTEBOOK_PATH=os.getcwd()
    PROJECT_ROOT=os.path.dirname(NOTEBOOK_PATH)
    LABELS_FILE_PATH=os.path.join(PROJECT_ROOT,"data","external","trainlabels.csv")

    #Read data
    data=pd.read_csv(LABELS_FILE_PATH)
    data_y = data.pop("Class")

    #Train-test split
    X_train, X_test, y_train, y_test = train_test_split(data, \
                                                        data_y,stratify=data_y,test_size=0.02,train_size=0.08)

    #Train-cv split
    X_train, X_cv, y_train, y_cv = train_test_split(X_train, y_train,stratify=y_train,test_size=0.02)

    print('Number of data points in train data:', X_train.shape[0])
    print('Number of data points in test data:', X_test.shape[0])
    print('Number of data points in cross validation data:', X_cv.shape[0])

    #Validating distribution
    TRAIN_FIG_PATH=os.path.join(PROJECT_ROOT,'reports','figures','2.0-train-y-distribution.png')
    TEST_FIG_PATH=os.path.join(PROJECT_ROOT,'reports','figures','2.0-test-y-distribution.png')
    CV_FIG_PATH=os.path.join(PROJECT_ROOT,'reports','figures','2.0-cv-y-distribution.png')
    y_distribution('TRAIN',y_train,TRAIN_FIG_PATH)
    y_distribution('TEST',y_test,TEST_FIG_PATH)
    y_distribution('CV',y_cv,CV_FIG_PATH)
    return X_train,X_test,X_cv,y_train,y_test,y_cv
