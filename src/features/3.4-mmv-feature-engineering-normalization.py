# Data Normalization
## Import necessary libraries
import os
from tqdm import tqdm
import numpy as np
import pandas as pd
from sklearn.preprocessing import MinMaxScaler
from scipy.sparse import csr_matrix,load_npz,save_npz,hstack
from time import time
import warnings
warnings.filterwarnings("ignore")
## Constants
def get_path():
    NOTEBOOK_PATH=os.getcwd()
    PROJECT_ROOT=os.path.dirname(NOTEBOOK_PATH)
    return PROJECT_ROOT
PROJECT_ROOT=get_path()
OUTPUT_PATH_TRAIN=os.path.join(PROJECT_ROOT,"data","processed","train")
OUTPUT_PATH_TEST=os.path.join(PROJECT_ROOT,"data","processed","test")
OUTPUT_PATH_CV=os.path.join(PROJECT_ROOT,"data","processed","cv")


## Read the saved files and convert to sparse matrix
file_name='Byte_Asm_File_sizes.csv'

file_sizes_train=pd.read_csv(os.path.join(OUTPUT_PATH_TRAIN,file_name))
file_sizes_test=pd.read_csv(os.path.join(OUTPUT_PATH_TEST,file_name))
file_sizes_cv=pd.read_csv(os.path.join(OUTPUT_PATH_CV,file_name))

file_sizes_train=file_sizes_train.drop(["Id"],axis=1)
file_sizes_test=file_sizes_test.drop(["Id"],axis=1)
file_sizes_cv=file_sizes_cv.drop(["Id"],axis=1)


file_sizes_train=csr_matrix(file_sizes_train)
file_sizes_test=csr_matrix(file_sizes_test)
file_sizes_cv=csr_matrix(file_sizes_cv)

file_name='unigram_features_sparse.npz'

unigram_features_train=load_npz(os.path.join(OUTPUT_PATH_TRAIN,file_name))
unigram_features_test=load_npz(os.path.join(OUTPUT_PATH_TEST,file_name))
unigram_features_cv=load_npz(os.path.join(OUTPUT_PATH_CV,file_name))

file_name='bigram_features_sparse.npz'

bigram_features_train=load_npz(os.path.join(OUTPUT_PATH_TRAIN,file_name))
bigram_features_test=load_npz(os.path.join(OUTPUT_PATH_TEST,file_name))
bigram_features_cv=load_npz(os.path.join(OUTPUT_PATH_CV,file_name))

file_name='image_features_asm.csv'

image_features_train=pd.read_csv(os.path.join(OUTPUT_PATH_TRAIN,file_name))
image_features_test=pd.read_csv(os.path.join(OUTPUT_PATH_TEST,file_name))
image_features_cv=pd.read_csv(os.path.join(OUTPUT_PATH_CV,file_name))

image_features_train=image_features_train.drop(["ID"],axis=1)
image_features_test=image_features_test.drop(["ID"],axis=1)
image_features_cv=image_features_cv.drop(["ID"],axis=1)


image_features_train=csr_matrix(image_features_train)
image_features_test=csr_matrix(image_features_test)
image_features_cv=csr_matrix(image_features_cv)
## Concatenate all features
all_features_train=hstack((file_sizes_train,\
                           unigram_features_train,\
                            bigram_features_train,\
                            image_features_train))

all_features_test=hstack((file_sizes_test,\
                           unigram_features_test,\
                            bigram_features_test,\
                            image_features_test))

all_features_cv=hstack((file_sizes_cv,\
                           unigram_features_cv,\
                            bigram_features_cv,\
                            image_features_cv))
## Normalize features
scaler = MinMaxScaler()
print("-"*50)
print("X_train")
start=time()
all_features_train=all_features_train.toarray()
all_features_train=scaler.fit_transform(all_features_train)
all_features_train=csr_matrix(all_features_train)
end=time()
print(f"Feature normalization completed. Elapsed time:{round((end-start)/3600,2)} hours")
print("-"*50)


print("X_test")
start=time()
all_features_test=all_features_test.toarray()
all_features_test=scaler.fit_transform(all_features_test)
all_features_test=csr_matrix(all_features_test)
end=time()
print(f"Feature normalization completed. Elapsed time:{round((end-start)/3600,2)} hours")
print("-"*50) 


print("X_cv")
start=time()
all_features_cv=all_features_cv.toarray()
all_features_cv=scaler.fit_transform(all_features_cv)
all_features_cv=csr_matrix(all_features_cv)
end=time()
print(f"Feature normalization completed. Elapsed time:{round((end-start)/3600,2)} hours")
print("-"*50)

## Save the normalized featues to file
save_npz(os.path.join(OUTPUT_PATH_TRAIN,'all_features_normalized_train.npz'),all_features_train)
save_npz(os.path.join(OUTPUT_PATH_TEST,'all_features_normalized_test.npz'),all_features_test)
save_npz(os.path.join(OUTPUT_PATH_CV,'all_features_normalized_cv.npz'),all_features_cv)
