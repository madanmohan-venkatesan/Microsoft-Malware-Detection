
# Feature engineering for ASM files - ASM image
## Import necessary libraries
import os
import array
from csv import writer
import numpy as np
from time import time
from train_test_cv_split import read_data
X_train,X_test,X_cv,y_train,y_test,y_cv=read_data()
## Constants
def get_path():
    NOTEBOOK_PATH=os.getcwd()
    PROJECT_ROOT=os.path.dirname(NOTEBOOK_PATH)
    return PROJECT_ROOT
PROJECT_ROOT=get_path()
ASM_FILES_PATH=os.path.join(PROJECT_ROOT,"data","interim","asmFiles")
OUTPUT_PATH_TRAIN=os.path.join(PROJECT_ROOT,"data","processed","train")
OUTPUT_PATH_TEST=os.path.join(PROJECT_ROOT,"data","processed","test")
OUTPUT_PATH_CV=os.path.join(PROJECT_ROOT,"data","processed","cv")

## Feature extraction from ASM files
def read_image(filename):
    f = open(filename,'rb')
    ln = os.path.getsize(filename) # length of file in bytes
    width = 256
    rem = ln%width
    a = array.array("B") # uint8 array
    a.fromfile(f,ln-rem)
    f.close()
    g = np.reshape(a,(int(len(a)/width),width)).copy()
    g = np.uint8(g)
    g.resize((1000,))
    return list(g)
def extract_asm_image_features(files,path_to_file):
    if not os.path.isfile(path_to_file):
        ftot = len(files)    
        outrows = []
        with open(path_to_file,'w') as f:
            fw = writer(f)
            column_names = ['ID'] + [("ASM_{:s}".format(str(x))) for x in range(1000)]
            fw.writerow(column_names)
            for idx, fname in enumerate(files):
                image_data = read_image(fname+'.asm')
                outrows.append([fname] + image_data)

                # Print progress
                if (idx+1) % 100 == 0:
                    print(idx + 1, 'of', ftot, 'files processed.')
                    fw.writerows(outrows)
                    outrows = []

            # Write remaining files
            if len(outrows) > 0:
                fw.writerows(outrows)
                outrows = []  
    else:
        print(f"{path_to_file} is already present!")
filenames_train=[f"{file_name}" for file_name in X_train.Id.values]
filenames_test=[f"{file_name}" for file_name in X_test.Id.values]
filenames_cv=[f"{file_name}" for file_name in X_cv.Id.values]

file_ID_train=[os.path.join(ASM_FILES_PATH,file_name) for file_name in filenames_train]
file_ID_test=[os.path.join(ASM_FILES_PATH,file_name) for file_name in filenames_test]
file_ID_cv=[os.path.join(ASM_FILES_PATH,file_name) for file_name in filenames_cv]

OUTPUT_PATH_TRAIN=os.path.join(OUTPUT_PATH_TRAIN,'image_features_asm.csv')
OUTPUT_PATH_TEST=os.path.join(OUTPUT_PATH_TEST,'image_features_asm.csv')
OUTPUT_PATH_CV=os.path.join(OUTPUT_PATH_CV,'image_features_asm.csv')

start=time()
print("Extracting asm image features for X_train")
extract_asm_image_features(file_ID_train,OUTPUT_PATH_TRAIN)
end=time()
print(f"Extracting asm image features features for X_train completed. Elapsed time:{round((end-start)/3600,2)} hours")

start=time()
print("Extracting asm image features features for X_test")
extract_asm_image_features(file_ID_test,OUTPUT_PATH_TEST)
end=time()
print(f"Extracting asm image features features for X_test completed. Elapsed time:{round((end-start)/3600,2)} hours")

start=time()
print("Extracting asm image features features for X_cv")
extract_asm_image_features(file_ID_cv,OUTPUT_PATH_CV)
end=time()
print(f"Extracting asm image features features for X_cv completed. Elapsed time:{round((end-start)/3600,2)} hours")
