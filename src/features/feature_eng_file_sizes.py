
#Importing requrired libraries
import os
import numpy as np
import pandas as pd
# from train_test_cv_split import read_data

## Performing train-test-cv split and verifying the distribution of classes
def get_path():
    NOTEBOOK_PATH=os.getcwd()
    PROJECT_ROOT=os.path.dirname(NOTEBOOK_PATH)
    return PROJECT_ROOT
PROJECT_ROOT=get_path()
OUTPUT_PATH_TRAIN=os.path.join(PROJECT_ROOT,"data","processed","train")
OUTPUT_PATH_TEST=os.path.join(PROJECT_ROOT,"data","processed","test")
OUTPUT_PATH_CV=os.path.join(PROJECT_ROOT,"data","processed","cv")


X_train=pd.read_csv(os.path.join(OUTPUT_PATH_TRAIN,"X_train.csv"))
X_test=pd.read_csv(os.path.join(OUTPUT_PATH_TEST,"X_test.csv"))
X_cv=pd.read_csv(os.path.join(OUTPUT_PATH_CV,"X_cv.csv"))
y_train=pd.read_csv(os.path.join(OUTPUT_PATH_TRAIN,"y_train.csv"))
y_test=pd.read_csv(os.path.join(OUTPUT_PATH_TEST,"y_test.csv"))
y_cv=pd.read_csv(os.path.join(OUTPUT_PATH_CV,"y_cv.csv"))
## Feature Extraction

def get_path():
    NOTEBOOK_PATH=os.getcwd()
    PROJECT_ROOT=os.path.dirname(NOTEBOOK_PATH)
    return PROJECT_ROOT

def append_byte_size(id):
    file=f"{id}.bytes"
    PROJECT_ROOT=get_path()
    BYTES_FILE_PATH=os.path.join(PROJECT_ROOT,"data","interim","byteFiles")
    statinfo=os.stat(os.path.join(BYTES_FILE_PATH,file))
    return round(statinfo.st_size/(1024.0*1024.0),2)

def append_asm_size(id):
    file=f"{id}.asm"
    PROJECT_ROOT=get_path()
    ASM_FILE_PATH=os.path.join(PROJECT_ROOT,"data","interim","asmFiles")
    statinfo=os.stat(os.path.join(ASM_FILE_PATH,file))
    return round(statinfo.st_size/(1024.0*1024.0),2)

X_train_features=X_train.copy()
X_test_features=X_test.copy()
X_cv_features=X_cv.copy()

X_train_features['BYTE_SIZE']=X_train_features.map(append_byte_size)
X_test_features['BYTE_SIZE']=X_test_features.map(append_byte_size)
X_cv_features['BYTE_SIZE']=X_cv_features.map(append_byte_size)
X_train_features['ASM_SIZE']=X_train_features['Id'].map(append_asm_size)
X_test_features['ASM_SIZE']=X_test_features['Id'].map(append_asm_size)
X_cv_features['ASM_SIZE']=X_cv_features['Id'].map(append_asm_size)

## Writing the output
### Constansts

PROJECT_ROOT=get_path()
FEATURE_EXTRACTION_OUTPUT_PATH=os.path.join(PROJECT_ROOT,"data","processed")
TRAIN_OUTPUT_FILE=os.path.join(FEATURE_EXTRACTION_OUTPUT_PATH,"Byte_Asm_File_sizes_train.csv")
TEST_OUTPUT_FILE=os.path.join(FEATURE_EXTRACTION_OUTPUT_PATH,"Byte_Asm_File_sizes_test.csv")
CV_OUTPUT_FILE=os.path.join(FEATURE_EXTRACTION_OUTPUT_PATH,"Byte_Asm_File_sizes_cv.csv")

X_train_features.to_csv(TRAIN_OUTPUT_FILE,index=False)
X_test_features.to_csv(TEST_OUTPUT_FILE,index=False)
X_cv_features.to_csv(CV_OUTPUT_FILE,index=False)
